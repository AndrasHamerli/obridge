package {{javaPackageName}};

import {{contextPackage}}.*;
import {{converterPackage}}.*;
import {{objectPackage}}.*;

import javax.annotation.Generated;
import javax.sql.DataSource;
import java.math.BigDecimal;
import java.sql.*;
import java.util.List;
import java.util.Arrays;

@Generated("org.obridge.generators.PackageObjectGenerator")
public final class {{javaClassName}} {

    private {{javaClassName}}() {
    }

    {{#procedureList}}

    public static void {{javaProcedureName}}({{storedProcedureClassName}} ctx, Connection connection) throws SQLException {
        CallableStatement ocs = connection.prepareCall({{& callString}});
        {{#bindParams}}
        {{#inParam}}
        {{& paramSet}}
        {{/inParam}}
        {{#outParam}}
        {{& regOutput}}
        {{/outParam}}
        {{/bindParams}}
        ocs.execute();
        {{#bindParams}}
        {{#outParam}}
        {{& paramGet}}
        {{/outParam}}
        {{/bindParams}}
        {{^hasResultSetParam}}
        ocs.close();
        {{/hasResultSetParam}}
    }

    public static {{storedProcedureClassName}} {{javaProcedureName}}({{#argumentList}}{{#inParam}}{{&javaDataType}} {{javaPropertyName}}, {{/inParam}}{{/argumentList}} Connection connection) throws SQLException {
        {{storedProcedureClassName}} ctx = new {{storedProcedureClassName}}();
        {{#argumentList}}
        {{#inParam}}
        ctx.set{{javaPropertyNameBig}}({{javaPropertyName}});
        {{/inParam}}
        {{/argumentList}}

        {{javaProcedureName}}(ctx, connection);

        return ctx;
    }

    public static {{storedProcedureClassName}} {{javaProcedureName}}({{#argumentList}}{{#inParam}}{{&javaDataType}} {{javaPropertyName}}, {{/inParam}}{{/argumentList}} DataSource dataSource) {
        Connection conn = null;
        {{storedProcedureClassName}} ret = null;

        try {
            conn = dataSource.getConnection();
            return {{javaProcedureName}}({{#argumentList}}{{#inParam}}{{javaPropertyName}}, {{/inParam}}{{/argumentList}} conn);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            try {
                if (conn != null && !conn.isClosed()) {
                    conn.close();
                }
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }

    {{/procedureList}}

}
