package {{javaPackageName}};

import {{contextPackage}}.*;
import {{converterPackage}}.*;
import {{objectPackage}}.*;

import jakarta.annotation.Generated;
import javax.sql.DataSource;
import java.math.BigDecimal;
import java.sql.*;
import java.util.List;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;

import javax.sql.DataSource;

import org.springframework.jdbc.core.*;
import org.springframework.jdbc.object.StoredProcedure;
import org.springframework.stereotype.Repository;

@Repository
@Generated("org.obridge.generators.PackageObjectGenerator")
public class {{javaClassName}} {

{{#procedureList}}
    private final {{storedProcedureClassName}}Dao {{javaProcedureName}};
{{/procedureList}}

public {{javaClassName}}(DataSource dataSource) {
{{#procedureList}}
    this.{{javaProcedureName}} = new {{storedProcedureClassName}}Dao(dataSource);
{{/procedureList}}
}

{{#procedureList}}
    public {{contextPackage}}.{{storedProcedureClassName}} {{javaProcedureName}}({{& concatenatedTypedInParameters}}) {
    {{contextPackage}}.{{storedProcedureClassName}} ctx = new {{contextPackage}}.{{storedProcedureClassName}}();
    {{#argumentList}}
        {{#inParam}}
            ctx.set{{javaPropertyNameBig}}({{javaPropertyName}});
        {{/inParam}}
    {{/argumentList}}

    this.{{javaProcedureName}}.call(ctx);

    return ctx;
    }
{{/procedureList}}

{{#procedureList}}
    public static final class {{storedProcedureClassName}}Dao extends StoredProcedure {

    private {{storedProcedureClassName}}Dao(DataSource dataSource) {
    super(dataSource, "{{& completeDbName}}");
    {{#bindParams}}
        {{& paramDeclaration}}
    {{/bindParams}}
    this.compile();
    }

    public void call({{contextPackage}}.{{storedProcedureClassName}} ctx) {
    try {
    Map<String, Object> call = this.execute(connection -> {
    Map<String, Object> inputs = new HashMap<>();
    {{#bindParams}}
        {{#inParam}}
            {{& paramSet}}
        {{/inParam}}
    {{/bindParams}}

    return inputs;
    });

    {{#bindParams}}
        {{#outParam}}
            {{& paramGet}}
        {{/outParam}}
    {{/bindParams}}
    } catch (Exception e) {
    throw new StoredProcedureCallException(e.getMessage(), e);
    }
    }
    }
{{/procedureList}}
}
